; Constants and state file.
; There are comments scattered through this file, so you may like to
; take a look if would like to learn more about the cns.

[Data]
life = 1000			;Amount of life to start with
power = 3000		;Amount of maximum power
attack = 80		;attack power (more is stronger)
defence = 100		;defensive power (more is stronger)
fall.defence_up = 50	;Percentage to increase defense everytime player is knocked down
liedown.time = 60		;Time which player lies down for, before getting up
airjuggle = 15		;Number of points for juggling
sparkno = 2			;Default hit spark number for HitDefs
guard.sparkno = 40	;Default guard spark number
KO.echo = 0			;1 to enable echo on KO
volume = 0			;Volume offset (negative for softer)
IntPersistIndex = 60	;Variables with this index and above will not have their values
FloatPersistIndex = 40  ;reset to 0 between rounds or matches. There are 60 int variables,
  				;indexed from 0 to 59, and 40 float variables, indexed from 0 to 39.
  				;If omitted, then it defaults to 60 and 40 for integer and float
  				;variables repectively, meaning that none are persistent, i.e. all
  				;are reset. If you want your variables to persist between matches,
  				;you need to override state 5900 from common1.cns.


[Size]
xscale = 1			;Horizontal scaling factor.
yscale = 1			;Vertical scaling factor.
ground.back = 15		;Player width (back, ground)
ground.front = 16		;Player width (front, ground)
air.back = 12		;Player width (back, air)
air.front = 12		;Player width (front, air)
height = 60			;Height of player (for opponent to jump over)
attack.dist = 160		;Default attack distance
proj.attack.dist = 90	;Default attack distance for projectiles
proj.doscale = 0		;Set to 1 to scale projectiles too   
head.pos = -5, -90	;Approximate position of head
mid.pos = -5, -60		;Approximate position of midsection
shadowoffset = 0		;Number of pixels to vertically offset the shadow
draw.offset = 0,0		;Player drawing offset in pixels (x, y)

[Remap]
x = x
y = y
z = z
a = a
b = b
c = c
s = s
[Velocity]
walk.fwd  = 2.4		;Walk forward
walk.back = -2.2		;Walk backward
run.fwd  = 4.6, 0		;Run forward (x, y)
run.back = -4.5,-3.8	;Hop backward (x, y)
jump.neu = 0,-8.4		;Neutral jumping velocity (x, y)
jump.back = -2.55		;Jump back Speed (x, y)
jump.fwd = 2.5		;Jump forward Speed (x, y)
runjump.back = -2.55,-8.1;Running jump speeds (opt)
runjump.fwd = 4,-8.1	;.
airjump.neu = 0,-8.1	;.
airjump.back = -2.55	;Air jump speeds (opt)
airjump.fwd = 2.5		;.

[Movement]
airjump.num = 1		;Number of air jumps allowed (opt)
airjump.height = 35	;Minimum distance from ground before you can air jump (opt)
yaccel = .44		;Vertical acceleration
stand.friction = .85	;Friction coefficient when standing
crouch.friction = .82	;Friction coefficient when crouching

;---------------------------------------------------------------------------
; Format:
; [Statedef STATENO]
; type = ?      S/C/A/L  stand/crouch/air/liedown
; movetype = ?  I/A/H    idle/attack/gethit
; physics = ?   S/C/A/N  stand/crouch/air/none
; juggle = ?             air juggle points move requires
;
; [State STATENO, ?]     ? - any number you choose
; type = ?
; ...


;---------------------------------------------------------------------------
; Lose by Time Over
; CNS difficulty: basic
[Statedef 170]
type = S
ctrl = 0
anim = 170
velset = 0,0

[State 170, 1]
type = NotHitBy
trigger1 = 1
value = SCA
time = 1

;---------------------------------------------------------------------------
; Win state decider
; CNS difficulty: basic
[Statedef 180]
type = S

[State 180, 1]
type = ChangeState
trigger1 = Time = 0
value = 181

;---------------------------------------------------------------------------
; Win pose 1
; CNS difficulty: basic
[Statedef 181]
type = S
ctrl = 0
anim = ifelse(var(10)=0,180,181)
velset = 0,0

[State 181, 1]
type = NotHitBy
trigger1 = 1
value = SCA
time = 1

;---------------------------------------------------------------------------
; Introduction
; CNS difficulty: basic
[Statedef 190]
type = S
ctrl = 0
anim = 190
velset = 0,0

[State 190, 1] ;Freeze animation until PreIntro is over
type = ChangeAnim
trigger1 = RoundState = 0
value = 190

[State 190, 2] ;Assert this until you want "round 1, fight" to begin
type = AssertSpecial
trigger1 = 1
flag = Intro

[State 190, 4] ;Change to stand state
type = ChangeState
trigger1 = AnimTime = 0
value = 0

;---------------------------------------------------------------------------
; Taunt
; CNS difficulty: easy
[Statedef 195]
type = S
ctrl = ifelse(var(15)=0,0,1)
anim = ifelse(var(10)=0,195,9195)
velset = 0,0
movetype = A
physics = S
sprpriority = 2

[State 195, 1]
type = HitDef
trigger1 = animelem = 2
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(p2life<101,150,ifelse(var(10)=0,5,20)),2			;Damage that move inflicts, guard damage
animtype = Light			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA		;Flags on how move is to be guarded against
hitflag = MAF		;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 0			;Time attacker pauses, time opponent shakes
					;Y-offset for the spark rel. to p1
hitsound = s0,5			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 5		;Time that the opponent slides back
ground.hittime  = 12		;Time opponent is in hit state
ground.velocity = -4		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -1.4,-3		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 12			;Time before opponent regains control in air

[State 195, 2]
type = HitDef
trigger1 = animelem = 3
attr = S, NA			;Attribute: Standing, Normal Attack
damage =ifelse(p2life<101,100,ifelse(var(10)=0,5,10)), 2			;Damage that move inflicts, guard damage
animtype = Light			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAF			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 0			;Time attacker pauses, time opponent shakes
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 5		;Time that the opponent slides back
ground.hittime  = 12		;Time opponent is in hit state
ground.velocity = -4		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -1.4,-3		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 12			;Time before opponent regains control in air

[State 195, 2]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Standing Light Punch
; CNS difficulty: easy
[Statedef 200]
type    = S				;State-type: S-stand, C-crouch, A-air, L-liedown
movetype= A				;Move-type: A-attack, I-idle, H-gethit
physics = S				;Physics: S-stand, C-crouch, A-air
juggle  = 1				;Number of air juggle points move takes
;Commonly-used controllers:
velset = 0,0			;Set velocity (x,y) (Def: no change)
ctrl = ifelse(var(15)=0,0,1)				;Set ctrl (Def: no change)
anim = ifelse(var(10)=0,200,9200)				;Change animation (Def: no change)
poweradd = 20			;Power to add (Def: 0)
sprpriority = 2			;Set layering priority to 2 (in front)

[State 200, 1]
type = HitDef
trigger1 = animelem = 2
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,15,20), ifelse(var(10)=0,0,5)			;Damage that move inflicts, guard damage
animtype = Light			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAF			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 8, 8			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 5		;Time opponent is in hit state
ground.velocity = -4,-1		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,-1		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 200, 2]
type = HitDef
trigger1 = animelem = 3
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,20,25), ifelse(var(10)=0,0,5)			;Damage that move inflicts, guard damage
animtype = Light			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAF			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 8, 8			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 5		;Time opponent is in hit state
ground.velocity = -4,-1		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -4,-1		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 200, EnvShake]
type = EnvShake
trigger1 = p2life <201
triggerall = animelem = 1
time = 60
freq = 1000
;ampl = -4
;phase = 90
;ignorehitpause = 
;persistent = 

[State 200, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Standing Medium Punch
; CNS difficulty: easy
[Statedef 210]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 65
ctrl = ifelse(var(15)=0,0,1)
velset = 0,0
anim = ifelse(var(10)=0,210,9210)

[State 200, 2]
type = HitDef
trigger1 = animelem = 2
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,50,65), ifelse(var(10)=0,0,7)			;Damage that move inflicts, guard damage
animtype = Medium			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAF			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 0			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 6		;Time that the opponent slides back
ground.hittime  = 5		;Time opponent is in hit state
ground.velocity = -7,-2		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -12,-6		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 200, EnvShake]
type = EnvShake
trigger1 = p2life <201
triggerall = animelem = 1
time = 80
freq = 1000
;ampl = -4
;phase = 90
;ignorehitpause = 
;persistent = 

[State 210, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Standing Strong Punch
; CNS difficulty: easy
[Statedef 220]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 65
ctrl = ifelse(var(15)=0,0,1)
velset = 0,0
anim = ifelse(var(10)=0,220,9220)

[State 220, 1]
type = HitDef
trigger1 = animelem = 4
attr = S, NA			;Attribute: Standing, Normal Attack
damage = 250, 0			;Damage that move inflicts, guard damage
animtype = Light			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = C			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 30			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = Trip		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 0		;Time that the opponent slides back
ground.hittime  = 30		;Time opponent is in hit state
ground.velocity = 0		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -4,-1		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 200, EnvShake]
type = EnvShake
trigger1 = p2life <201
triggerall = animelem = 1
time = 300
freq = 1000
;ampl = -4
;phase = 90
;ignorehitpause = 
;persistent = 

[State 220, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Standing Light Kick
; CNS difficulty: easy
[Statedef 230]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 22
ctrl = ifelse(var(15)=0,0,1)
velset = 0,0
anim = ifelse(var(10)=0,230,9230)

[State 230, 2]
type = HitDef
trigger1 = animelem = 2
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,70,85), ifelse(var(10)=0,0,5)			;Damage that move inflicts, guard damage
animtype = Medium			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAF			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 0			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 3		;Time that the opponent slides back
ground.hittime  = 5		;Time opponent is in hit state
ground.velocity = -2,-4		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,-6		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 230, EnvShake]
type = EnvShake
trigger1 = p2life <201
triggerall = animelem = 1
time = 80
freq = 1000
;ampl = -4
;phase = 90
;ignorehitpause = 
;persistent =

[State 230, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Standing Medium Kick
; CNS difficulty: easy
[Statedef 240]
type    = S
movetype= A
physics = S
juggle  = 5
poweradd= 65
ctrl = ifelse(var(15)=0,0,1)
velset = 0,0
anim = ifelse(var(10)=0,240,9240)

[State 240, 2]
type = HitDef
trigger1 = animelem = 2
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,30,40),ifelse(var(10)=0,0,5)			;Damage that move inflicts, guard damage
animtype = Medium			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAF			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 5			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 8		;Time opponent is in hit state
ground.velocity = -3,-1		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,-6		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 240, EnvShake]
type = EnvShake
trigger1 = p2life <201
triggerall = animelem = 1
time = 80
freq = 1000

[State 240, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Standing Strong Kick
; CNS difficulty: easy
[Statedef 250]
type    = S
movetype= A
physics = S
juggle  = 5
poweradd= 65
ctrl = ifelse(var(15)=0,0,1)
velset = 0,0
anim = ifelse(var(10)=0,250,9250)

[State 240, 2]
type = HitDef
trigger1 = animelem = 4
attr = S, NA			;Attribute: Standing, Normal Attack
damage = 20, 0			;Damage that move inflicts, guard damage
animtype = Medium			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 40			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 3		;Time that the opponent slides back
ground.hittime  = 5		;Time opponent is in hit state
ground.velocity = -2,-4		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,-6		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 240, 3]
type = HitDef
trigger1 = animelem = 9
attr = S, NA			;Attribute: Standing, Normal Attack
damage = 50, 0			;Damage that move inflicts, guard damage
animtype = Medium			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 20			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 3		;Time that the opponent slides back
ground.hittime  = 5		;Time opponent is in hit state
ground.velocity = -2,-4		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,-6		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 250, Projectile]
type = Projectile
trigger1 = animelem = 2
trigger1 = var(10) = 1
ProjID = 9255
projanim = 9255
projhitanim = 9255
projremanim = 9255
projcancelanim = 9225
projscale = 1,1
projremove = 1
projremovetime = -1
velocity = 5
remvelocity = 0,0
accel = 0,0
velmul = 1
projhits = 1
projmisstime = 0
projpriority = 1
projsprpriority = 3
projedgebound = 40
projstagebound = 40
projheightbound = -240
offset = 8,7
postype = P1         ;P2, Front, Back, Left, Right
projshadow = 0,0,0
supermovetime = 0
pausemovetime = 0
attr = S, SP
damage = 20, 0			;Damage that move inflicts, guard damage
animtype = Medium			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, ifelse(movehit,40,0)			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 3		;Time that the opponent slides back
ground.hittime  = 5		;Time opponent is in hit state
ground.velocity = -2,-4		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,-6		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 250, Projectile]
type = Projectile
trigger1 = animelem = 4
trigger1 = var(10) = 1
ProjID = 9255
projanim = 9255
projhitanim = 9255
projremanim = 9255
projcancelanim = 9225
projscale = 1,1
projremove = 1
projremovetime = -1
velocity = 5
remvelocity = 0,0
accel = 0,0
velmul = 1
projhits = 1
projmisstime = 0
projpriority = 1
projsprpriority = 3
projedgebound = 40
projstagebound = 40
projheightbound = -240
offset = 8,7
postype = P1         ;P2, Front, Back, Left, Right
projshadow = 0,0,0
supermovetime = 0
pausemovetime = 0
attr = S, SP
damage = 20, 0			;Damage that move inflicts, guard damage
animtype = Medium			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, ifelse(movehit,20,0)			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 3		;Time that the opponent slides back
ground.hittime  = 5		;Time opponent is in hit state
ground.velocity = -2,-4		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,-6		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 240, EnvShake]
type = EnvShake
trigger1 = p2life <201
triggerall = animelem = 1
time = 160
freq = 1000

[State 250, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Pepper Activate
; CNS difficulty: easy
[Statedef 260]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 65
ctrl = 0
velset = 0,0
anim = 260

[State 0, SuperPause]
type = SuperPause
trigger1 = animelem = 1
time = 55
movetime = 55
pos = 0,-50
darken = 1
p2defmul = 0
poweradd = 0
unhittable = 1
;ignorehitpause = 
;persistent = 

[State 200, EnvShake]
type = EnvShake
trigger1 = animelem = 3
time = 200
freq = 50
;ampl = -4
;phase = 90
;ignorehitpause = 
;persistent = 

[State 200, VarSet]
type = VarSet
trigger1 = animelem = 3
v = 10    ;fv = 10
value = 1
;ignorehitpause = 
;persistent = 

[State 240, 3]
type = HitDef
trigger1 = animelem = 3
attr = S, NA			;Attribute: Standing, Normal Attack
damage = 0, 0			;Damage that move inflicts, guard damage
animtype = Medium			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 40			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 0		;Time that the opponent slides back
ground.hittime  = 0	;Time opponent is in hit state
ground.velocity = 0		;Velocity at which opponent is pushed
airguard.velocity = 0	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = 0		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 210, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; 236 Top Row Projectile Shoot
; CNS difficulty: easy
[Statedef 270]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 65
ctrl = ifelse(var(15)=0,0,1)
velset = 0,0
anim = ifelse(var(10)=0,270,9270)

[State 250, Projectile]
type = Projectile
trigger1 = animelem = 1
ProjID = ifelse(var(10)=0,275,9275)
projanim = ifelse(var(10)=0,275,9275)
projhitanim = ifelse(var(10)=0,275,9275)
projremanim = ifelse(var(10)=0,275,9275)
projcancelanim = ifelse(var(10)=0,275,9275)
projscale = 1,1
projremove = 1
projremovetime = -1
velocity = 2.5
remvelocity = 0,0
accel = 0,0
velmul = 1
projhits = 1
projmisstime = 0
projpriority = 1
projsprpriority = 3
projedgebound = 40
projstagebound = 40
projheightbound = -240
offset = ifelse(var(10)=0,2,-16),ifelse(var(10)=0,-55,-32)
postype = P1         ;P2, Front, Back, Left, Right
projshadow = 0,0,0
supermovetime = 0
pausemovetime = 0
attr = S, SP
damage = ifelse(var(10)=0,10,20), 0			;Damage that move inflicts, guard damage
animtype = Medium			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, ifelse(movehit,5,0)			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 7		;Time that the opponent slides back
ground.hittime  = 5		;Time opponent is in hit state
guard.velocity = 8
ground.velocity = 7		;Velocity at which opponent is pushed
airguard.velocity = 1	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = 1		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 270, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Summon Blackhole
; CNS difficulty: easy
[Statedef 280]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= -2000
ctrl = ifelse(var(15)=0,0,1)
velset = 0,0
anim = ifelse(var(10)=0,280,9280)

[State 280, SuperPause]
type = SuperPause
trigger1 = animelem = 1
time = 20
anim = 6 
sound = S0,3
pos = 0,0
darken = 1
unhittable = 1
;ignorehitpause = 
;persistent = 

[State 280, Helper]
type = Helper
trigger1 = animelem = 1
helpertype = Normal ;Player
name = 285
ID = 285
stateno = 285
pos = 41,-36
postype = P1    ;P2, Front, Back, Left, Right
facing = 1
keyctrl = 0
ownpal = 0

[State 280, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Blackhole
; CNS difficulty: easy
[Statedef 285]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 0
ctrl = 0
velset = 0,0
anim = 285

[State 240, 3]
type = HitDef
trigger1 = animelem = 1
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,10,15), 2			;Damage that move inflicts, guard damage
animtype = Medium			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 10			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = s0,2			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 0		;Time that the opponent slides back
ground.hittime  = 0	;Time opponent is in hit state
ground.velocity = 0		;Velocity at which opponent is pushed
airguard.velocity = 0	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = 0		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 240, SuperPause]
type = SuperPause
trigger1 = animelem = 1
trigger1 = movehit
time = 15
anim = 6
pos = 0,0
darken = 0

[State 240, 3]
type = HitDef
trigger1 = animelem = 2
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,155,200), 3			;Damage that move inflicts, guard damage
animtype = Medium			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 10			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = s0,0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 0		;Time that the opponent slides back
ground.hittime  = 0	;Time opponent is in hit state
ground.velocity = 0		;Velocity at which opponent is pushed
airguard.velocity = 0	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = 0		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 240, EnvColor]
type = EnvColor
trigger1 = animelem = 2
trigger1 = movehit
value = 100,0,0
time = 15
under = 1

[State 240, SuperPause]
type = SuperPause
trigger1 = animelem = 2
trigger1 = movehit
time = 15
anim = 6
pos = 0,0
darken = 0

[State 240, 3]
type = HitDef
trigger1 = animelem = 3
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,185,235), 5			;Damage that move inflicts, guard damage
animtype = Medium			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 10			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-3offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = s0,0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 0		;Time that the opponent slides back
ground.hittime  = 0	;Time opponent is in hit state
ground.velocity = 0		;Velocity at which opponent is pushed
airguard.velocity = 0	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = 0		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 240, EnvColor]
type = EnvColor
trigger1 = animelem = 3
trigger1 = movehit
value = 175,0,0
time = 15
under = 1

[State 240, SuperPause]
type = SuperPause
trigger1 = animelem = 3
trigger1 = movehit
time = 15
anim = 6
pos = 0,0
darken = 0

[State 240, 3]
type = HitDef
trigger1 = animelem = 4
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,285,295), 7			;Damage that move inflicts, guard damage
animtype = Medium			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 10			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-3offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = s0,0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 0		;Time that the opponent slides back
ground.hittime  = 0	;Time opponent is in hit state
ground.velocity = 0		;Velocity at which opponent is pushed
airguard.velocity = 0	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = 0		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 240, EnvColor]
type = EnvColor
trigger1 = animelem = 4
trigger1 = movehit
value = 225,0,0
time = 15
under = 1

[State 240, SuperPause]
type = SuperPause
trigger1 = animelem = 4
trigger1 = movehit
time = 15
anim = 6
pos = 0,0
darken = 0

[State 240, 5]
type = HitDef
trigger1 = animelem = 5
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,135,200), 10			;Damage that move inflicts, guard damage
animtype = Medium			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 5, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 10			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-3offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = s0,4		;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = Low		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 0		;Time that the opponent slides back
ground.hittime  = 0	;Time opponent is in hit state
ground.velocity = 0		;Velocity at which opponent is pushed
airguard.velocity = 0	;Guard velocity in air (def: (air.x'v;l'el*1.5, air.yvel/2))
air.type = Low		;Type: High, Low, Trip;l ';(;dll;';l'ef: same as ground.type)
air.velocity = 0		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 240, EnvColor]
type = EnvColor
trigger1 = animelem = 5
trigger1 = movehit
value = 255,0,0
time = 30
under = 1

[State 240, SuperPause]
type = SuperPause
trigger1 = animelem = 5
trigger1 = movehit
time = 30
anim = 6
pos = 0,0
darken = 0

[State 240, DestroySelf]
type = DestroySelf
trigger1 = animtime = 0
;ignorehitpause = 
;persistent = 

;---------------------------------------------------------------------------
; Infinite Combo
; CNS difficulty: easy
[Statedef 290]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= -1000
ctrl = 0
velset = 0,0
anim = ifelse(var(10)=0,290,9290)

[State 0, AfterImage]
type = AfterImage
trigger1 = animelem = 1
time = 150
length = 20
;palcolor = 256
;palinvertall = 0
;palbright = 30,30,30
;palcontrast = 120,120,220
;palpostbright = 0,0,0
;paladd = 10,10,25
;palmul = .65,.65,.75
;timegap = 1
;framegap = 4
;trans = Add ;None, Add1, Sub
;ignorehitpause = 
;persistent = 

[State 0, SuperPause]
type = SuperPause
trigger1 = animelem = 1 
time = 10
anim = 1421512621512512
pos = 0,0
darken = 1
p2defmul = 0
poweradd = 0
unhittable = 1
;ignorehitpause = 
;persistent = 

[State 0, VarSet]
type = VarSet
trigger1 = animelem = 1
v = 15    ;fv = 10
value = 1
;ignorehitpause = 
;persistent = 


[State 0, Helper]
type = Helper
trigger1 = animelem = 1
helpertype = Normal ;Player
name = 295
ID = 295
stateno = 295
pos = 0,0
postype = P1    ;P2, Front, Back, Left, Right
facing = 1
keyctrl = 0
ownpal = 0
;supermovetime = 0
;pausemovetime = 0
;size.xscale (float)
;size.yscale (float)
;size.ground.back (int)
;size.ground.front (int)
;size.air.back (int)
;size.air.front (int)
;size.height (int)
;size.proj.doscale (int)
;size.head.pos (int,int)
;size.mid.pos (int,int)
;size.shadowoffset (int)
;ignorehitpause = 
;persistent = 

[State 290, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Infinite Combo Timer
; CNS difficulty: easy
[Statedef 295]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 0
ctrl = 295
velset = 0,0
anim = 295

[State 295, ParentVarSet]
type = ParentVarSet
trigger1 = animelem = 2
v = 15    ;fv = 10
value = 0
;ignorehitpause = 
;persistent = 

[State 295, DestroySelf]
type = DestroySelf
trigger1 = animelem = 3
;ignorehitpause = 
;persistent = 

;---------------------------------------------------------------------------
; Hot Glue
; CNS difficulty: easy
[Statedef 300]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= -1000
ctrl = 0
velset = 0,0
anim = ifelse(var(10)=0,300,9300)

[State 0, SuperPause]
type = SuperPause
trigger1 = animelem = 1
time = 10
anim = 21412512521
sound = 215125125215
pos = 0,0
darken = 1
p2defmul = 0
poweradd = 0
unhittable = 1
;ignorehitpause = 
;persistent = 


[State 300, Projectile]
type = Projectile
trigger1 = animelem = 1
ProjID = 305
projanim = 305
projhitanim = 305
projremanim = 305
projcancelanim = 305
projscale = 1,1
projremove = 1
projremovetime = -1
velocity = 0.5
remvelocity = 0,0
accel = 0.3,0
velmul = 1
projhits = 1
projmisstime = 0
projpriority = 1
projsprpriority = 9
projedgebound = 40
projstagebound = 40
projheightbound = -240
offset = 33,-43
postype = P1         ;P2, Front, Back, Left, Right
projshadow = 0,0,0
supermovetime = 0
pausemovetime = 0
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,75,125), 100			;Damage that move inflicts, guard damage
animtype = Medium			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 7, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 150			;Time attacker pauses, time opponent shakes
guard.pausetime = 0,55 ;i had to do it justin
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-3offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = s0,4		;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = Low		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 0		;Time that the opponent slides back
ground.hittime  = 0	;Time opponent is in hit state
ground.velocity = 0		;Velocity at which opponent is pushed
airguard.velocity = 0	;Guard velocity in air (def: (air.x'v;l'el*1.5, air.yvel/2))
air.type = Low		;Type: High, Low, Trip;l ';(;dll;';l'ef: same as ground.type)
air.velocity = 0		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air
;ignorehitpause = 
;persistent = 

[State 300, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Crouching Light Punch
; CNS difficulty: easy
; Description: Simple crouching attack. The HitDef's guardflag parameter
;     is set to "L", meaning that the move can only be guarded low
;     (crouching), and not by standing or jumping opponents.
;     Like for all light attacks, it's a good idea to keep the slidetime
;     and hittime parameters at a smaller number, so the opponent isn't
;     stunned for too long. For all crouching attacks you have to
;     remember to set the attr parameter to indicate that it is crouching
;     attack. In this case, "C, NA" stands for "crouching, normal attack".
;     The HitDef's priority is set at 3, instead of the default of 4,
;     so this attack has a lower priority than most others, meaning the
;     player will get hit instead of trading hits with the opponent if
;     their attack collision boxes (Clsn1) intersect each other's Clsn2
;     boxes at the same time.
[Statedef 400]
type    = C
movetype= A
physics = C
juggle  = 5
poweradd= 15
ctrl = ifelse(var(15)=0,0,1)
anim = ifelse(var(10)=0,400,9400)

[State 400, 1]
type = HitDef
trigger1 = animelem = 2
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(p2life<201,80,40), 15			;Damage that move inflicts, guard damage
animtype = Light			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = ifelse(p2life<201,CA,)			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 5, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 4, ifelse(p2life<201,20,0)			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 1		;Time that the opponent slides back
ground.hittime  = 9		;Time opponent is in hit state
ground.velocity = -2		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,-1		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 400, EnvShake]
type = EnvShake
trigger1 = p2life <201
triggerall = animelem = 1
time = 30
freq = 1000

[State 400, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;---------------------------------------------------------------------------
; Snake
[Statedef 405]
type    = C
movetype= A
physics = C
juggle  = 6
poweradd= 10
ctrl = ifelse(var(15)=0,0,1)
anim = 405

[State 405, VelAdd]
type = VelAdd
trigger1 = animelem = 1
x = 5
y = 0
;ignorehitpause = 
;persistent = 

[State 405, VelAdd]
type = VelAdd
trigger1 = animelem = 2
x = ifelse(var(10)=0,5,10)

[State 405, VelAdd]
type = VelAdd
trigger1 = animelem = 3
x = ifelse(var(10)=0,5,8)

[State 405, VelAdd]
type = VelAdd
trigger1 = animelem = 4
x = ifelse(var(10)=0,5,8)

[State 405, 1]
type = HitDef
trigger1 = animelem = 1
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(p2life<201,20,7), 4			;Damage that move inflicts, guard damage
animtype = Light			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 5, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 4, ifelse(p2life<201,20,0)			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 1		;Time that the opponent slides back
ground.hittime  = 9		;Time opponent is in hit state
ground.velocity = -4,-1		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,-1		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 405, 1]
type = HitDef
trigger1 = animelem = 2
attr = S, NA			;Attribute: Standing, Normal Attack
pausetime = 5, ifelse(p2life<201,20,0)				;Damage that move inflicts, guard damage
animtype = Light			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 5, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 4, 0			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 1		;Time that the opponent slides back
ground.hittime  = 9		;Time opponent is in hit state
ground.velocity = -4,-1		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,-1		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 405, 1]
type = HitDef
trigger1 = animelem = 3
attr = S, NA			;Attribute: Standing, Normal Attack
pausetime = 5, ifelse(p2life<201,20,0)				;Damage that move inflicts, guard damage
animtype = Light			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 4, 0			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 1		;Time that the opponent slides back
ground.hittime  = 9		;Time opponent is in hit state
ground.velocity = -4,-1		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,-1		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 405, 1]
type = HitDef
trigger1 = animelem = 4
attr = S, NA			;Attribute: Standing, Normal Attack
pausetime = 5, ifelse(p2life<201,20,0)				;Damage that move inflicts, guard damage
animtype = Light			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 4, 0			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 1		;Time that the opponent slides back
ground.hittime  = 9		;Time opponent is in hit state
ground.velocity = -4,-1		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,-1		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 405, 1]
type = HitDef
trigger1 = animelem = 5
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(p2life<201,35,7), 10				;Damage that move inflicts, guard damage
animtype = Light			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 5, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 2, 1			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 1		;Time that the opponent slides back
ground.hittime  = 3		;Time opponent is in hit state
ground.velocity = -4,-1		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,-1		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 405, EnvColor]
type = EnvColor
triggerall = movehit
triggerall = p2life < 201
trigger1 = animelem = 1
trigger2 = animelem = 2
value = 255,10,50
time = 20
under = 1
;ignorehitpause = 
;persistent = 

[State 405, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;---------------------------------------------------------------------------
; Crouching Medium Punch
[Statedef 410]
type    = C
movetype= A
physics = C
juggle  = 6
poweradd= 50
ctrl = ifelse(var(15)=0,0,1)
anim = ifelse(var(10)=0,410,9410)

[State 410, 1]
type = HitDef
trigger1 = animelem = 2
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(p2life<201,90,50), 15			;Damage that move inflicts, guard damage
animtype = Light			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = ifelse(p2life<201,CA,)			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 5, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 4, ifelse(p2life<201,20,0)			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 1		;Time that the opponent slides back
ground.hittime  = 9		;Time opponent is in hit state
ground.velocity = -2		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -1,-7		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 410, EnvShake]
type = EnvShake
trigger1 = p2life <201
triggerall = animelem = 1
time = 40
freq = 1000

[State 410, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;---------------------------------------------------------------------------
; Crouching Strong Punch
[Statedef 420]
type    = C
movetype= A
physics = C
juggle  = 6
poweradd= 50
ctrl = ifelse(var(15)=0,0,1)
anim = ifelse(var(10)=0,420,9420)

[State 0, VelSet]
type = VelSet
trigger1 = animelem = 1
x = -3
y = 0
;ignorehitpause = 
;persistent = 

[State 0, VelSet]
type = VelSet
trigger1 = animelem = 2
x = -1
y = 0

[State 0, VelSet]
type = VelSet
trigger1 = animelem = 3
x = 15


[State 420, 1]
type = HitDef
trigger1 = animelem = 3
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(p2life<201,170,120), 80			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = ifelse(p2life<201,CA,)			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 5, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 4, ifelse(p2life<201,20,0)			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 1		;Time that the opponent slides back
ground.hittime  = 15		;Time opponent is in hit state
ground.velocity = -10,-9		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -9,-12		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 420, EnvShake]
type = EnvShake
trigger1 = p2life <201
triggerall = animelem = 3
time = 90
freq = 1000

[State 420, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;---------------------------------------------------------------------------
; Crouching Light Kick
; CNS difficulty: easy
[Statedef 430]
type    = C
movetype= A
physics = C
juggle  = 5
poweradd= 22
ctrl = ifelse(var(15)=0,0,1)
anim = ifelse(var(10)=0,430,9430)

[State 0, AfterImage]
type = AfterImage
trigger1 = animelem = 1
time = 25
length = 20
;palcolor = 0
;palinvertall = 0
;palbright = 30,30,30
;palcontrast = 120,120,220
;palpostbright = 0,0,0
;paladd = 10,10,25
;palmul = .65,.65,.75
;timegap = 1
;framegap = 4
;trans = Add ;None, Add1, Sub
;ignorehitpause = 
;persistent = 


[State 430, VelSet]
type = VelSet
trigger1 = animelem = 1
x = ifelse(var(10)=0,8,15)
y = 0

[State 430, VelSet]
type = VelSet
trigger1 = animelem = 2
x = ifelse(var(10)=0,7,14)
y = 0

[State 430, VelSet]
type = VelSet
trigger1 = animelem = 3
x = 6
y = 0

[State 430, VelSet]
type = VelSet
trigger1 = animelem = 4
x = 4
y = 0

[State 430, VelSet]
type = VelSet
trigger1 = animelem = 5
x = 3
y = 0

[State 430, VelSet]
type = VelSet
trigger1 = animelem = 6
x = 3
y = 0

[State 430, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;---------------------------------------------------------------------------
; Crouching Medium Kick
; CNS difficulty: easy
[Statedef 440]
type    = C
movetype= A
physics = C
juggle  = 5
poweradd= 22
ctrl = ifelse(var(15)=0,0,1)
anim = ifelse(var(10)=0,440,9440)

[State 0, AfterImage]
type = AfterImage
trigger1 = animelem = 1
time = 50
length = 20
;palcolor = 0
;palinvertall = 0
;palbright = 30,30,30
;palcontrast = 120,120,220
;palpostbright = 0,0,0
;paladd = 10,10,25
;palmul = .65,.65,.75
;timegap = 1
;framegap = 4
;trans = Add ;None, Add1, Sub
;ignorehitpause = 
;persistent = 


[State 430, VelSet]
type = VelSet
trigger1 = animelem = 1
x = 13
y = 0

[State 430, VelSet]
type = VelSet
trigger1 = animelem = 2
x = 11
y = 0

[State 430, VelSet]
type = VelSet
trigger1 = animelem = 3
x = 9
y = 0

[State 430, VelSet]
type = VelSet
trigger1 = animelem = 4
x = 7
y = 0

[State 430, VelSet]
type = VelSet
trigger1 = animelem = 5
x = 5
y = 0

[State 430, VelSet]
type = VelSet
trigger1 = animelem = 6
x = 2
y = 0

[State 440, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;---------------------------------------------------------------------------
;Counter Start
; CNS difficulty: easy
; Description: This move uses "Trip" for the "ground.type" parameter in
;     its HitDef. It's a special type that puts the opponent in a tripped
;     animation as he falls. Also, the hitflag parameter in the HitDef
;     is set to "MAFD". The "D" indicates that a downed opponent can be
;     hit by the attack.
[Statedef 450]
type    = C
movetype= A
physics = C
juggle  = 7
poweradd= 70
ctrl = ifelse(var(15)=0,0,1)
anim = ifelse(var(10)=0,450,9450)

[State 450, 5]
type = ChangeState
trigger1 = P2movetype = A
trigger1 = animelem = 2
value = 455
ctrl = 1

[State 450, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;----------------------
;Failed Counter
[Statedef 451]
type    = C
movetype= A
physics = C
juggle  = 7
poweradd= 70
ctrl = 0
anim = 451

[State 451, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;----------------------
;Counter
[Statedef 455]
type    = C
movetype= A
physics = C
juggle  = 7
poweradd= 70
ctrl = ifelse(var(15)=0,0,1)
anim = 455

[State 455, 1]
type = HitDef
trigger1 = animelem = 1
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(p2life<201,100,50), 50			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =			;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 5, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, ifelse(p2life<201,100,50)			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 1		;Time that the opponent slides back
ground.hittime  = 15		;Time opponent is in hit state
ground.velocity = 0		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = 0		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 0, EnvShake]
type = EnvShake
trigger1 = p2life <201
triggerall = animelem = 1
time = 100
freq = 1000
;ampl = -4
;phase = 90
;ignorehitpause = 
;persistent = 

[State 0, EnvColor]
type = EnvColor
trigger1 = movehit
value = 255,0,0
time = 10
under = 1

[State 450, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 1
ctrl = 1

;---------------------------------------------------------------------------
; Jump Light Punch
; CNS difficulty: easy
[Statedef 600]
type    = A
movetype= A
physics = A
juggle  = 2
poweradd= 11
ctrl = ifelse(var(15)=0,0,1)
anim = ifelse(var(10)=0,600,9600)

[State 600, Projectile]
type = Projectile
trigger1 = animelem = 2
ProjID = 600
projanim = ifelse(var(10)=0,601,9601)
projhitanim = ifelse(var(10)=0,602,9601)
projremanim = ifelse(var(10)=0,602,9601)
projcancelanim = ifelse(var(10)=0,602,9601)
projscale = 1,1
projremove = 1
projremovetime = -1
velocity = ifelse(var(10)=0,2,4),ifelse(var(10)=0,2.5,1)
remvelocity = 0.5,0.25
accel = 0,0
velmul = ifelse(var(10)=0,1.025,1),ifelse(var(10)=0,0.975,1)
projhi/ltl/;; l/s = 1
projmisstime = 0
projpriority = 1
projsprpriority = 3
projedgebound = 40
projstagebound = 40
projheightbound = -240
offset = 19,-32
postype = P1         ;P2, Front, Back, Left, Right
projshadow = 0,0,0
supermovetime = 0
pausemovetime = 0
attr = S, SP
damage   = ifelse(var(10)=0,15,25)
animtype = light
guardflag = MA
hitflag = MAF
pausetime = 1,1
hitsound   = s0,1
sparkxy = 500,500
guardsound = S6,0
ground.type = Low
ground.slidetime = 25
ground.hittime  = 5
ground.velocity = -6
air.animtype = light
air.velocity = -1,-2
air.juggle = 3
air.fall = 0
down.velocity = -4,-6
down.hittime = 30
down.bounce = 0
;ignorehitpause = 
;persistent = 

[State 600, 5]
type = CtrlSet
trigger1 = Time = 20
value = 1

;---------------------------------------------------------------------------
; Jump Medium Punch
; CNS difficulty: easy
[Statedef 610]
type    = A
movetype= A
physics = A
juggle  = 4
poweradd= 65
ctrl = ifelse(var(15)=0,0,1)
anim = ifelse(var(10)=0,610,9610)

[State 610, 1]
type = HitDef
trigger1 = animelem = 1
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,45,55),5			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =	SA		;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 5, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 10, 10			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = s0, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 1		;Time that the opponent slides back
ground.hittime  = 15		;Time opponent is in hit state
ground.velocity = -1,-8		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -1,-6		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 610, 1]
type = HitDef
trigger1 = animelem = 2
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,15,20),5			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =	SA		;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 5, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 10, 10			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = s0, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 1		;Time that the opponent slides back
ground.hittime  = 15		;Time opponent is in hit state
ground.velocity = -1,-8		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -1,-6		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 5			;Time before opponent regains control in air

[State 610, VelSet]
type = VelSet
trigger1 = animelem = 1
x = 0
y = -3
;ignorehitpause = 
;persistent = 


[State 610, 5]
type = CtrlSet
trigger1 = Time = 20
value = 1

;---------------------------------------------------------------------------
; Jump Strong Punch
; CNS difficulty: easy
[Statedef 620]
type    = A
movetype= A
physics = A
juggle  = 4
poweradd= 70
ctrl = ifelse(var(15)=0,0,1)
anim = ifelse(var(10)=0,620,9620)

[State 0, VelSet]
type = VelSet
trigger1 = animelem = 1
x = 3
y = -9
;ignorehitpause = 
;persistent = 


[State 620, Projectile]
type = Projectile
trigger1 = animelem = 1
ProjID = 620
projanim = ifelse(var(10)=0,625,9625)
projhitanim = ifelse(var(10)=0,625,9625)
projremanim = ifelse(var(10)=0,625,9625)
projcancelanim = ifelse(var(10)=0,625,9625)
projscale = 1,1
projremove = 1
projremovetime = -1
velocity = 0,0.3
remvelocity = 0,0
accel = 0,0
velmul = 0,1.1
projhits = 1
projmisstime = 0
projpriority = 2
projsprpriority = 3
projedgebound = 40
projstagebound = 40
projheightbound = -240
offset = 19,-6
postype = P1         ;P2, Front, Back, Left, Right
projshadow = 0,0,0
supermovetime = 0
pausemovetime = 0
attr = S, SP
damage   = 35
animtype = heavy
guardflag = MA
hitflag = MAFDP
pausetime = 1,1
hitsound   = s0,0
sparkxy = 500,500
guardsound = S6,0
ground.type = trip
ground.slidetime = 25
ground.hittime  = 5
ground.velocity = -6
air.animtype = light
air.velocity = -1,-2
air.juggle = 3
air.fall = 1
down.velocity = -4,-6
down.hittime = 30
down.bounce = 0
;ignorehitpause = 
;persistent = 



;---------------------------------------------------------------------------
; Jump Light Kick
; CNS difficulty: easy
[Statedef 630]
type    = A
movetype= A
physics = A
juggle  = 10
poweradd= 20
ctrl = 1

[State 0, ChangeAnim]
type = ChangeAnim
trigger1 = time = 0
value = ifelse(var(10)=0,630,9630)
elem = ifelse(MoveHit,2,1)

[State 0, VelSet]
type = VelSet
trigger1 = animelem = 2
y = -2
;ignorehitpause = 
;persistent = 

[State 0, VelSet]
type = VelSet
trigger1 = animelem = 3
y = -3

[State 0, VelSet]
type = VelSet
trigger1 = animelem = 4
y = -4

[State 0, VelSet]
type = VelSet
trigger1 = animelem = 5
y = -5

[State 0, VelSet]
type = VelSet
trigger1 = animelem = 6
y = 0

[State 610, 1]
type = HitDef
trigger1 = animelem = 2
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,2,4),1			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =	SA		;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 5, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 10, 20			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -10		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = s0, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 20		;Time opponent is in hit state
ground.velocity = 0,-8		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,0		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 20			;Time before opponent regains control in air

[State 610, 2]
type = HitDef
trigger1 = animelem = 3
attr = S, NA			;Attribute: Standing, Normal Attack
damage = 15,5			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =	SA		;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 5, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 10, 10			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = s0, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 20		;Time opponent is in hit state
ground.velocity = 0,-8		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -1,-5		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 20			;Time before opponent regains control in air

[State 610, 3]
type = HitDef
trigger1 = animelem = 4
attr = S, NA			;Attribute: Standing, Normal Attack
damage = 20,5			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =	SA		;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 5, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 10, 10			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = s0, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 20		;Time opponent is in hit state
ground.velocity = 0,-8		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -1,-5		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 20			;Time before opponent regains control in air

[State 610, 4]
type = HitDef
trigger1 = animelem = 5
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,20,40),5			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =	SA		;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 5, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 10, 10			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = s0, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = High		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 20		;Time opponent is in hit state
ground.velocity = 0,-8		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -1,-5		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 20			;Time before opponent regains control in air

[State 630, 5]
type = CtrlSet
trigger1 = Time = 10
value = ifelse(var(15)=0,0,1)

;---------------------------------------------------------------------------
; Jump Medium Kick
; CNS difficulty: easy
[Statedef 640]
type    = A
movetype= A
physics = A
juggle  = 4
poweradd= 65
ctrl = ifelse(var(15)=0,0,1)
anim = ifelse(var(10)=0,640,9640)

[State 0, VelSet]
type = VelSet
trigger1 = animelem = 3
x = 3
y = 1
 
[State 640, 2]
type = HitDef
trigger1 = animelem = 2
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,10,15),1			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =	SA		;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 5			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = s0, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = high		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 5		;Time opponent is in hit state
ground.velocity = -2,1		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = high			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -1,1		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 20			;Time before opponent regains control in air

 
[State 640, 3]
type = HitDef
trigger1 = animelem = 3
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,15,20),1			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =	SA		;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 5			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = s0, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = trip		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 5		;Time opponent is in hit state
ground.velocity = -4,3		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = trip			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,5		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 20			;Time before opponent regains control in air

[State 640, 5]
type = CtrlSet
trigger1 = Time = 20
value = 1

;---------------------------------------------------------------------------
; Jump Strong Kick
; CNS difficulty: easy
[Statedef 650]
type    = A
movetype= A
physics = A
juggle  = 4
poweradd= 70
ctrl = ifelse(var(15)=0,0,1)
anim = ifelse(var(10)=0,650,9650)

[State 650, VelSet]
type = VelSet
trigger1 = animelem = 1
x = 2
y = 0
;ignorehitpause = 
;persistent = 

[State 650, VelSet]
type = VelSet
trigger1 = animelem = 2
x = 2
y = 0

[State 650, VelSet]
type = VelSet
trigger1 = animelem = 3
x = 2
y = 0


[State 650, 1]
type = HitDef
trigger1 = animelem = 1
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,5,7),1			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =	sa		;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 9			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = low		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 5		;Time opponent is in hit state
ground.velocity = -4,3		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = low			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,5		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 20			;Time before opponent regains control in air


[State 650, 2]
type = HitDef
trigger1 = animelem = 2
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,10,13),1			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =	sa		;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 5			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = low		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 5		;Time opponent is in hit state
ground.velocity = -4,3		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = low			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,5		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 20			;Time before opponent regains control in air


[State 650, 3]
type = HitDef
trigger1 = animelem = 3
attr = S, NA			;Attribute: Standing, Normal Attack
damage = ifelse(var(10)=0,10,15),1			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =	sa		;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 5			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = low		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 5		;Time opponent is in hit state
ground.velocity = -4,3		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = low			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -2,5		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 20			;Time before opponent regains control in air

[State 650, 5]
type = CtrlSet
trigger1 = time = 30
value = 1


;---------------------------------------------------------------------------
; Air Snake
[Statedef 655]
type    = A
movetype= A
physics = A
juggle  = 6
poweradd= 10
ctrl = ifelse(var(15)=0,0,1)
anim = 405

[State 405, VelAdd]
type = VelAdd
trigger1 = animelem = 1
x = 2
y = -0.5
;ignorehitpause = 
;persistent = 

[State 405, VelAdd]
type = VelAdd
trigger1 = animelem = 2
x = 2
y = -0.5

[State 405, VelAdd]
type = VelAdd
trigger1 = animelem = 3
x = 1
y = -1

[State 405, VelAdd]
type = VelAdd
trigger1 = animelem = 4
x = 0.5
y = -1

[State 655, 1]
type = HitDef
trigger1 = animelem = 1
attr = S, NA			;Attribute: Standing, Normal Attack
damage = 3,1			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =	mafd		;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 1			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = low		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 2		;Time opponent is in hit state
ground.velocity = 0		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = low			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = 0		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 3			;Time before opponent regains control in air


[State 655, 1]
type = HitDef
trigger1 = animelem = 2
attr = S, NA			;Attribute: Standing, Normal Attack
damage = 3,1			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =	mafd		;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 1			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = low		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 2		;Time opponent is in hit state
ground.velocity = 0		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = low			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = 0		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 3			;Time before opponent regains control in air


[State 655, 1]
type = HitDef
trigger1 = animelem = 3
attr = S, NA			;Attribute: Standing, Normal Attack
damage = 3,1			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =	mafd		;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 1			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = low		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 2		;Time opponent is in hit state
ground.velocity = 0		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = low			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = 0		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 3			;Time before opponent regains control in air


[State 655, 1]
type = HitDef
trigger1 = animelem = 4
attr = S, NA			;Attribute: Standing, Normal Attack
damage = 3,1			;Damage that move inflicts, guard damage
animtype = Heavy			;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag =	mafd		;Flags on how move is to be guarded against
hitflag = MAFD			;Flags of conditions that move can hit
priority = 3, Hit			;Attack priority: 0 (least) to 7 (most), 4 default
					;Hit/Miss/Dodge type (Def: Hit)
pausetime = 0, 1			;Time attacker pauses, time opponent shakes
sparkno = -1				;Spark anim no (Def: set above)
sparkxy = -10, -76		;X-offset for the "hit spark" rel. to p2,
					;Y-offset for the spark rel. to p1
hitsound = 5, 0			;Sound to play on hit
guardsound = 6, 0			;Sound to play on guard
ground.type = low		;Type: High, Low, Trip (def: Normal)
ground.slidetime = 2		;Time that the opponent slides back
ground.hittime  = 2		;Time opponent is in hit state
ground.velocity = 0		;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8	;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = low			;Type: High, Low, Trip (def: same as ground.type)
air.velocity = 0		;X-velocity at which opponent is pushed,
					;Y-velocity at which opponent is pushed
air.hittime = 3			;Time before opponent regains control in air

;---------------------------------------------------------------------------
; Air Dash Forwards
[Statedef 660]
type    = A
movetype= A
physics = A
juggle  = 6
poweradd= 10
ctrl = ifelse(var(15)=0,0,1)
anim = ifelse(var(10)=0,660,9660)

[State 0, AfterImage]
type = AfterImage
trigger1 = animelem = 1
time = 15
length = 20
palcolor = 256
;palinvertall = 0
;palbright = 30,30,30
;palcontrast = 120,120,220
;palpostbright = 0,0,0
;paladd = 10,10,25
;palmul = .65,.65,.75
;timegap = 1
;framegap = 4
;trans = Add ;None, Add1, Sub
;ignorehitpause = 
;persistent = 


[State 660, VelSet]
type = VelSet
trigger1 = animelem = 1
x = 7.5
y = 0
;ignorehitpause = 
;persistent = 

[State 660, VelSet]
type = VelSet
trigger1 = animelem = 2
x = 4.5
y = -3

[State 660, VelSet]
type = VelSet
trigger1 = animelem = 3
x = 0
y = -2

[State 0, CtrlSet]
type = CtrlSet
trigger1 = animelem = 2
value = 1
;ignorehitpause = 
;persistent = 

;---------------------------------------------------------------------------
; Air Dash Forwards
[Statedef 670]
type    = A
movetype= A
physics = A
juggle  = 6
poweradd= 10
ctrl = ifelse(var(15)=0,0,1)
anim = ifelse(var(10)=0,670,9670)

[State 0, AfterImage]
type = AfterImage
trigger1 = animelem = 1
time = 15
length = 20
palcolor = 256
;palinvertall = 0
;palbright = 30,30,30
;palcontrast = 120,120,220
;palpostbright = 0,0,0
;paladd = 10,10,25
;palmul = .65,.65,.75
;timegap = 1
;framegap = 4
;trans = Add ;None, Add1, Sub
;ignorehitpause = 
;persistent = 


[State 670, VelSet]
type = VelSet
trigger1 = animelem = 1
x = -7
y = 0
;ignorehitpause = 
;persistent = 

[State 670, VelSet]
type = VelSet
trigger1 = animelem = 2
x = -4.5
y = -3

[State 670, VelSet]
type = VelSet
trigger1 = animelem = 3
x = 0
y = -2

[State 0, CtrlSet]
type = CtrlSet
trigger1 = animelem = 2
value = 1
;ignorehitpause = 
;persistent = 

;---------------------------------------------------------------------------
; Throw - Attempt
; CNS difficulty: medium-advanced
; Description: Throws are not difficult to make, although then can be
;     tedious at times. Throw attempt states have a HitDef of a
;     special format. The key parameters in a throw are p1stateno
;     and p2stateno. If the HitDef successfully connects, then
;     the attacker will change to the state number specified by
;     p1stateno, and the opponent will be change to the state
;     number assigned to p2stateno. The special thing about p2stateno
;     is that the opponent will be temporarily brought into the
;     attacker's state file. In this case, no matter who the
;     opponent is, he will be taken to state 820 of this file (kfm.cns)
;     and remain here until the end of the throw (look at his debug
;     information when he is being thrown; the text changes to yellow
;     to mean that he is in another player's state file).
[Statedef 800]
type    = S
movetype= A
physics = S
juggle  = 0
velset = 0,0
ctrl = 0
anim = 800

; Notes: The '-' symbol in the hitflag field means that it only affects
;   players who are not in a hit state. This prevents the player from combo-ing
;   into the throw. The priority should be set to a low number, such as
;   1 or 2, so that the throw does not take precedence over normal attacks.
;   The type of priority must always be set to "Miss" or "Dodge" for throws,
;   otherwise strange behavior can result.
[State 800, 1]
type = HitDef
Trigger1 = Time = 0
attr = S, NT          ;Attributes: Standing, Normal Throw
hitflag = M-          ;Affect only ground people who are not being hit
priority = 1, Miss    ;Throw has low priority, must be miss or dodge type.
sparkno = -1          ;No spark
sprpriority = 1       ;Draw in front of p2
p1facing = ifelse (command = "holdfwd", -1, 1) ;Turn if holding forwards
p2facing = 1          ;Force p2 to face player
p1stateno = 810       ;On success, player changes to state 810
p2stateno = 820       ;If hit, p2 changes to state 820 in player's cns
fall = 1              ;Force p2 into falling down

[State 800, 2]
type = ChangeState
Trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Throwing the opponent
; Description: In this state, the player throws the opponent by binding him to
;     various offsets based on his current frame of animation. For
;     example, [State 810, Bind 1] binds the opponent to an offset of
;     28 pixels in front of the player. That puts him around where the hand
;     is at. Is is important to keep the opponent bound using a
;     TargetBind controller at all times, until you let him go. This
;     is especially important if your player has a Clsn2 box that
;     allows him to get hit while throwing someone. Each time a player
;     gets hit, all his bound targets will be set to a fall state. If
;     the opponent is not bound, then he might get stuck in his thrown
;     state when his attacker is knocked out of the throw halfway.
; Notes: There is a TargetLifeAdd controller to decrease the opponent's
;     life, and a TargetState controller to change his state to a
;     falling state when KFM lets go of him.
[Statedef 810]
type    = S
movetype= A
physics = N
anim = 810
poweradd = 60

[State 810, Bind 1]
type = TargetBind
trigger1 = AnimElemTime(2) < 0
pos = 28, 0

[State 810, Width 2-11]
type = Width
trigger1 = AnimElemTime(2) >= 0 && AnimElemTime(12) < 0
edge = 60,0

[State 810, Bind 2-4]
type = TargetBind
trigger1 = AnimElemTime(2) >= 0 && AnimElemTime(5) < 0
pos = 58, 0

[State 810, Bind 5]
type = TargetBind
trigger1 = AnimElemTime(5) >= 0 && AnimElemTime(6) < 0
pos = 47, 0

[State 810, Bind 6]
type = TargetBind
trigger1 = AnimElemTime(6) >= 0 && AnimElemTime(7) < 0
pos = 41, -60

[State 810, Bind 7]
type = TargetBind
trigger1 = AnimElemTime(7) >= 0 && AnimElemTime(8) < 0
pos = 25, -75

[State 810, Bind 8]
type = TargetBind
trigger1 = AnimElemTime(8) >= 0 && AnimElemTime(9) < 0
pos = 15, -90

[State 810, Bind 9]
type = TargetBind
trigger1 = AnimElemTime(9) >= 0 && AnimElemTime(10) < 0
pos = -5, -96

[State 810, Bind 10]
type = TargetBind
trigger1 = AnimElemTime(10) >= 0 && AnimElemTime(11) < 0
pos = -14, -90

[State 810, Bind 11]
type = TargetBind
trigger1 = AnimElem = 11
pos = -50, -50

[State 810, Hurt 11]
type = TargetLifeAdd
trigger1 = AnimElem = 11
value = -78

[State 810, Throw 11]
type = TargetState
trigger1 = AnimElem = 11
value = 821

[State 810, Turn 12]
type = Turn
trigger1 = AnimElem = 12

[State 810, Pos 15]
type = PosAdd
trigger1 = AnimElem = 15
x = -10

[State 810, State End]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Opponent Thrown
; (a custom gethit state)
; Description: This is the state that the opponent changes to after being
;     hit by the throw HitDef. The important thing here is to use a
;     ChangeAnim2 controller. The difference between ChangeAnim2 and
;     ChangeAnim is that ChangeAnim2 changes the player's animation to
;     an action in the AIR file of the attacker (in this case, kfm.air),
;     whereas ChangeAnim always changes the player to an action in his
;     own AIR file. Look at Action 820 in kfm.air for some extra
;     comments.
[Statedef 820]
type    = A
movetype= H
physics = N
velset = 0,0

[State 820, 1]
type = ChangeAnim2
Trigger1 = Time = 0
value = 820

;---------------------------------------------------------------------------
; Opponent thrown into the air
; (a custom gethit state)
; Description: This state has the opponent flying through the air and
;     falling down onto the ground. The SelfState controller sets the
;     opponent back using to his own state file when he his the ground.
;     Controllers 821,2 and 821,3 allow the opponent to recover by
;     hitting his recovery command when he is falling.
[Statedef 821]
type    = A
movetype= H
physics = N
velset = 2.8,-7
poweradd = 40

[State 821, 1] ;Gravity
type = VelAdd
Trigger1 = 1
y = .4

[State 821, 2] ; Recover near ground (use ChangeState)
type = ChangeState
triggerall = Vel Y > 0
triggerall = Pos Y >= -20
triggerall = alive
triggerall = CanRecover
trigger1 = Command = "recovery"
value = 5200 ;HITFALL_RECOVER

[State 821, 3] ; Recover in mid air (use SelfState)
type = SelfState
triggerall = Vel Y > 0
triggerall = alive
triggerall = CanRecover
trigger1 = Command = "recovery"
value = 5210 ;HITFALL_AIRRECOVER

[State 821, 4] ;Hit ground
type = SelfState
trigger1 = Vel Y > 0
trigger1 = Pos Y >= 0
value = 5100 ;Hit ground

;---------------------------------------------------------------------------
; Override common states (use same number to override) :
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; States that are always executed (use statedef -2)
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; States that are executed when in self's state file (use statedef -3)
;---------------------------------------------------------------------------

[Statedef -2]

;This controller plays a sound everytime the player lands from a jump, or
;from a back-dash.
[State -2, Landing Sound]
type = PlaySnd
triggerall = Time = 1
trigger1 = stateno = 52 ;Jump land
trigger2 = stateno = 106 ;Run-back land
value = 40, 0

;Set Normal Jahlil Form
[State 0, VarSet]
type = VarSet
trigger1 = roundstate = 0
v = 10    ;fv = 10
value = 0
;ignorehitpause = 
;persistent = 

;Set Infinite Combo
[State 0, VarSet]
type = VarSet
trigger1 = roundstate = 0
v = 15    ;fv = 10
value = 0

[State 0, EnvShake]
type = EnvShake
trigger1 = P2life <= 200
trigger1 = stateno = [200,4999]
trigger1 = animelem = 1
freq = (200 - P2life)*0.5
time = 40
ignorehitpause = 1

[State 0, BGPalFX]
type = BGPalFX
trigger1 = P2life <= 200
trigger1 = stateno = [200,4999]
time = 1
mul = floor(255+(200-P2life)*0.25),floor(255-(200-P2life)*0.25),floor(255-(200-P2life)*0.25)
add = floor((200-P2life)*0.5),floor((200-P2life)*-0.5),floor((200-P2life)*-0.5)
ignorehitpause = 1

[State 0, EnvColor]
type = EnvColor
trigger1 = P2Life = 0
trigger1 = RoundState = 3
value = 255,0,0
time = 60
under = 1
persistent = 0

[State 0, EnvShake]
type = EnvShake
trigger1 = P2Life = 0
trigger1 = RoundState = 3
time = 60
freq = 100
persistent = 0

